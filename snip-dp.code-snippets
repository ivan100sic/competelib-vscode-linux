{
	"Divide and Conquer DP (Quadrangle Inequality)": {
		"scope": "cpp",
		"prefix": "divideandconquerdp",
		"body": [
            "template<class C, class F = less<typename invoke_result<C, int, int>::type>>",
            "struct divide_and_conquer_dp {",
            "\tusing T = typename invoke_result<C, int, int>::type;",
            "\tC c; F f;",
            "",
            "\t// Cost function, value comparator (e.g. less for minimization)",
            "\tdivide_and_conquer_dp(C c, F f = F()) : c(c), f(f) {}",
            "",
            "\tvoid q(vector<T>& d, vector<T>& g, vector<int>& p, int l, int r, int a, int b) {",
            "\t\tif (l > r) return;",
            "\t\tint x = (l+r) >> 1;",
            "\t\tint y = a;",
            "\t\tT v = d[a] + c(a, x);",
            "\t\tfor (int i=a+1; i<=min(b, x); i++) {",
            "\t\t\tT w = d[i] + c(i, x);",
            "\t\t\tif (f(w, v)) v = w, y = i;",
            "\t\t}",
            "\t\tg[x] = v;",
            "\t\tp[x] = y;",
            "\t\tq(d, g, p, l, x-1, a, y);",
            "\t\tq(d, g, p, x+1, r, y, b);",
            "\t}",
            "",
            "\ttemplate<class H>",
            "\tvoid run(int n, int k, H h) {",
            "\t\tvector<T> d(n+1), g(n+1);",
            "\t\tvector<int> p(n+1);",
            "\t\tfor (int i=0; i<=n; i++) g[i] = c(0, i);",
            "\t\th(1, g, p);",
            "\t\tfor (int i=2; i<=k; i++) {",
            "\t\t\tswap(d, g);",
            "\t\t\tq(d, g, p, 0, n, 0, n);",
            "\t\t\th(i, g, p);",
            "\t\t}",
            "\t}",
            "",
            "\tT operator() (int n, int k) {",
            "\t\tT z = T();",
            "\t\trun(n, k, [&](int l, auto& g, auto&) { if (l == k) z = g[n]; });",
            "\t\treturn z;",
            "\t}",
            "};"
        ]
    }
}
