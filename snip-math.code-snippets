{
	"Matrix": {
		"scope": "cpp",
		"prefix": "matrix",
		"body": [
			"template<class R>",
			"struct matrix {",
			"\tvector<R> a;",
			"\tint n, m;",
			"",
			"\tmatrix(int _n, int _m = -1) : n(_n) {",
			"\t\tm = _m == -1 ? n : _m;",
			"\t\ta.resize(n*m);",
			"\t}",
			"",
			"\tstatic matrix eye(int n) {",
			"\t\tmatrix t(n);",
			"\t\tfor (int i=0; i<n; i++)",
			"\t\t\tt[i][i] = 1;",
			"\t\treturn t;",
			"\t}",
			"",
			"\tmatrix operator* (const matrix& b) const {",
			"\t\tmatrix c(n, b.m);",
			"\t\tfor (int i=0; i<n; i++)",
			"\t\t\tfor (int j=0; j<m; j++)",
			"\t\t\t\tfor (int k=0; k<b.m; k++)",
			"\t\t\t\t\tc[i][k] += a[m*i+j] * b[j][k];",
			"\t\treturn c;",
			"\t}",
			"",
			"\tmatrix& operator+= (const matrix& b) {",
			"\t\tfor (int i=0; i<n*m; i++)",
			"\t\t\ta[i] += b.a[i];",
			"\t\treturn *this;",
			"\t}",
			"",
			"\tmatrix& operator-= (const matrix& b) {",
			"\t\tfor (int i=0; i<n*m; i++)",
			"\t\t\ta[i] += b.a[i];",
			"\t\treturn *this;",
			"\t}",
			"",
			"\tR* operator[] (int x) { return a.data() + m*x; }",
			"\tconst R* operator[] (int x) const { return a.data() + m*x; }",
			"\tmatrix operator+ (const matrix& b) const { auto t = *this; t += b; return t; }",
			"\tmatrix operator- (const matrix& b) const { auto t = *this; t -= b; return t; }",
			"\tmatrix& operator*= (const matrix& b) { return *this = *this * b; }",
			"\ttemplate<class U> matrix operator^= (U arg) { return *this = *this ^ arg; }",
			"",
			"\ttemplate<class U>",
			"\tmatrix operator^ (U arg) const {",
			"\t\tif (arg == 0)",
			"\t\t\treturn matrix::eye(n);",
			"\t\tif (arg == 1)",
			"\t\t\treturn *this;",
			"\t\tauto t = *this ^ (arg >> 1);",
			"\t\tt *= t;",
			"\t\tif (arg & 1)",
			"\t\t\tt *= *this;",
			"\t\treturn t;",
			"\t}",
			"",
			"\tmatrix T() const {",
			"\t\tmatrix b(m, n);",
			"\t\tfor (int i=0; i<n; i++)",
			"\t\t\tfor (int j=0; j<m; j++)",
			"\t\t\t\tb[j][i] = a[i][j];",
			"\t\treturn b;",
			"\t}",
			"};"
		]
	},

	"Binomials": {
		"scope": "cpp",
		"prefix": "binomial",
		"body": [
			"template<class T = mint>",
			"struct binomial {",
			"\tvector<T> f, finv;",
			"",
			"\tbinomial(int n) : f(n), finv(n) {",
			"\t\tf[0] = finv[0] = 1;",
			"\t\tfor (int i=1; i<n; i++) {",
			"\t\t\tf[i] = f[i-1] * i;",
			"\t\t\tfinv[i] = T(1) / f[i];",
			"\t\t}",
			"\t}",
			"",
			"\tT mix(int a, int b) {",
			"\t\tif (a < 0 || b < 0)",
			"\t\t\treturn 0;",
			"\t\treturn f[a+b] * finv[a] * finv[b];",
			"\t}",
			"",
			"\tT choose(int n, int k) {",
			"\t\treturn mix(n-k, k);",
			"\t}",
			"};"
		]
	}
}
