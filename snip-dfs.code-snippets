{
	"Dominator tree": {
		"scope": "cpp",
		"prefix": "dominatortree",
		"body": [
			"struct dominator_tree {",
			"\tvector<basic_string<int>> g, rg, bucket;",
			"\tvector<int> arr, par, rev, sdom, dom, dsu, label;",
			"\tint n, t;",
			"\tdominator_tree(int n) : g(n), rg(n), bucket(n), arr(n, -1),",
			"\t\tpar(n), rev(n), sdom(n), dom(n), dsu(n), label(n), n(n), t(0) {}",
			"\tvoid add_edge(int u, int v) { g[u] += v; }",
			"\tvoid dfs(int u) {",
			"\t\tarr[u] = t;",
			"\t\trev[t] = u;",
			"\t\tlabel[t] = sdom[t] = dsu[t] = t;",
			"\t\tt++;",
			"\t\tfor (int w : g[u]) {",
			"\t\t\tif (arr[w] == -1) {",
			"\t\t\t\tdfs(w);",
			"\t\t\t\tpar[arr[w]] = arr[u];",
			"\t\t\t}",
			"\t\t\trg[arr[w]] += arr[u];",
			"\t\t}",
			"\t}",
			"\tint find(int u, int x=0) {",
			"\t\tif (u == dsu[u])",
			"\t\t\treturn x ? -1 : u;",
			"\t\tint v = find(dsu[u], x+1);",
			"\t\tif (v < 0)",
			"\t\t\treturn u;",
			"\t\tif (sdom[label[dsu[u]]] < sdom[label[u]])",
			"\t\t\tlabel[u] = label[dsu[u]];",
			"\t\tdsu[u] = v;",
			"\t\treturn x ? v : label[u];",
			"\t}",
			"\tvector<int> run(int root = 0) {",
			"\t\tdfs(root);",
			"\t\tiota(dom.begin(), dom.end(), 0);",
			"\t\tfor (int i=t-1; i>=0; i--) {",
			"\t\t\tfor (int w : rg[i])",
			"\t\t\t\tsdom[i] = min(sdom[i], sdom[find(w)]);",
			"\t\t\tif (i)",
			"\t\t\t\tbucket[sdom[i]] += i;",
			"\t\t\tfor (int w : bucket[i]) {",
			"\t\t\t\tint v = find(w);",
			"\t\t\t\tif (sdom[v] == sdom[w])",
			"\t\t\t\t\tdom[w] = sdom[w];",
			"\t\t\t\telse",
			"\t\t\t\t\tdom[w] = v;",
			"\t\t\t}",
			"\t\t\tif (i > 1)",
			"\t\t\t\tdsu[i] = par[i];",
			"\t\t}",
			"\t\tfor (int i=1; i<t; i++) {",
			"\t\t\tif (dom[i] != sdom[i])",
			"\t\t\t\tdom[i] = dom[dom[i]];",
			"\t\t}",
			"\t\tvector<int> outside_dom(n);",
			"\t\tiota(begin(outside_dom), end(outside_dom), 0);",
			"\t\tfor (int i=0; i<t; i++)",
			"\t\t\toutside_dom[rev[i]] = rev[dom[i]];",
			"\t\treturn outside_dom;",
			"\t}",
			"};"
		]
	},
}
